plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name + "-" + project.minecraft_version
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/" }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

    modApi "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}", {
        exclude group: "net.fabricmc.fabric-api"
    }

    modImplementation("com.terraformersmc:modmenu:${modmenu_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${fabric_kotlin_version}"
}

processResources {
    // expand all properties from gradle.properties
    def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
    stringProperties += ['version': project.version]

    stringProperties.each { inputs.property(it.key, it.value) }

    ['fabric.mod.json', 'bebooks.mixins.json'].each {
        filesMatching(it) {
            expand(stringProperties) {
                escapeBackslash = true
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.compilerArgs.add('-Xlint:deprecation')
    it.options.release = project.java_version as Integer
}

java {
    targetCompatibility = sourceCompatibility = project.java_version as Integer
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
